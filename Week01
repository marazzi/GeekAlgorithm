66.加一
#给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。你可以假设除了整数 0 之外，这个整数不会以零开头。

 

#示例 1：

#输入：digits = [1,2,3]
#输出：[1,2,4]
#解释：输入数组表示数字 123。
#示例 2：

#输入：digits = [4,3,2,1]
#输出：[4,3,2,2]
#解释：输入数组表示数字 4321。
3示例 3：

#输入：digits = [0]
#输出：[1]
 

#提示：

#1 <= digits.length <= 100
#0 <= digits[i] <= 9

#来源：力扣（LeetCode）
#链接：https://leetcode-cn.com/problems/plus-one
#著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

#代码

class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        nlist = []
        while digits and digits[-1] == 9:
            digits.pop()
            nlist.append(0)
        if not digits:
            return [1] + nlist
        else:
            digits[-1] += 1
            return digits + nlist

1.两数之和
#给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个整数，并返回它们的数组下标。

#你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。

#你可以按任意顺序返回答案。

 

#示例 1：

#输入：nums = [2,7,11,15], target = 9
#输出：[0,1]
#解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。
#示例 2：

#输入：nums = [3,2,4], target = 6
#输出：[1,2]
#示例 3：

#输入：nums = [3,3], target = 6
#输出：[0,1]
 

#提示：

#2 <= nums.length <= 103
#-109 <= nums[i] <= 109
#-109 <= target <= 109
#只会存在一个有效答案

#来源：力扣（LeetCode）
#链接：https://leetcode-cn.com/problems/two-sum
#著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。  

#代码
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in range(len(nums) - 1):
            base = nums[i]
            for j in range(i + 1, len(nums)):
                if base + nums[j] == target:
                    return [i, j]
            
